import sys
import heapq

INF = 22100000000

N, E = map(int, sys.stdin.readline().split())
graph = [[] for i in range(N+1)]
for i in range(E):
    a, b, c = map(int, sys.stdin.readline().split())
    graph[a].append((b, c))     # 연결된 정점, 최단거리
    graph[b].append((a, c))     # 방향성이 없는 그래프
v1, v2 = map(int, sys.stdin.readline().split())     # 반드시 지나야하는 정점

# 1 -> v1 -> v2 -> N
arr = [1, v1, v2, N]
answer1 = 0
for i in range(3):
    st = arr[i]
    end = arr[i+1]

    length = [INF for i in range(N + 1)]
    length[st] = 0
    visit = [0 for i in range(N + 1)]
    heap = [(0, st)]  # 최단거리, 정점
    heapq.heapify(heap)

    while True:
        if len(heap) == 0:
            break

        posLen, pos = heapq.heappop(heap)

        if visit[pos] == 1:
            continue
        visit[pos] = 1

        for j in graph[pos]:
            nowLen = posLen + j[1]
            if visit[j[0]] == 0 and nowLen < length[j[0]]:
                length[j[0]] = nowLen
                heapq.heappush(heap, (nowLen, j[0]))

    answer1 += length[end]

# 1 -> v2 -> v1 -> N
arr = [1, v2, v1, N]
answer2 = 0
for i in range(3):
    st = arr[i]
    end = arr[i+1]

    length = [INF for i in range(N + 1)]
    length[st] = 0
    visit = [0 for i in range(N + 1)]
    heap = [(0, st)]  # 최단거리, 정점
    heapq.heapify(heap)

    while True:
        if len(heap) == 0:
            break

        posLen, pos = heapq.heappop(heap)

        if visit[pos] == 1:
            continue
        visit[pos] = 1

        for j in graph[pos]:
            nowLen = posLen + j[1]
            if visit[j[0]] == 0 and nowLen < length[j[0]]:
                length[j[0]] = nowLen
                heapq.heappush(heap, (nowLen, j[0]))

    answer2 += length[end]


if answer1 >= INF and answer2 >= INF:
    print(-1)
else:
    print(min(answer1, answer2))
