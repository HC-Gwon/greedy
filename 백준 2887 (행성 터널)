# Kruskal algorithm
import sys
import heapq
INF = 2100000000


def find_parent(arr, x):
    while arr[x] != x:
        x = arr[x]

    return x


N = int(sys.stdin.readline())
planet = []
for i in range(1, N+1):
    x, y, z = map(int, sys.stdin.readline().split())
    planet.append((x, y, z, i))         # x, y, z, index

graph = []                              # 가중치, 정점 v1, v2
for i in range(3):                      # x, y, z 별로 정렬하여 정렬된 기준에서
    planet.sort(key=lambda x: x[i])     # 인접한 두 정점의 거리가 
    for j in range(1, N):
        graph.append((abs(planet[j-1][i] - planet[j][i]), planet[j-1][3], planet[j][3]))

graph.sort(key=lambda x: x[0], reverse=True)
root = [i for i in range(N+1)]          # 각 정점의 root
count = 0
answer = 0
while True:
    if count == N-1:                    # V-1개의 간선 생성시 종료
        break

    length = len(graph)
    weight, x1, x2 = graph[length-1]    # 가중치, 연결된 정점 1과 2
    # cycle 생성 방지
    p1 = find_parent(root, x1)
    p2 = find_parent(root, x2)
    if p1 != p2:
        count += 1
        answer += weight
        if p1 < p2:
            root[p2] = p1
        else:
            root[p1] = p2

    graph.pop()

print(answer)



# Prim algorithm
import sys
import heapq
INF = 2100000000


def find_parent(arr, x):
    while arr[x] != x:
        x = arr[x]

    return x


N = int(sys.stdin.readline())
planet = []
for i in range(1, N+1):
    x, y, z = map(int, sys.stdin.readline().split())
    planet.append((x, y, z, i))         # x, y, z, index

graph = [[] for i in range(N+1)]        # 가중치, 정점 v1, v2
for i in range(3):
    planet.sort(key=lambda x: x[i])
    for j in range(1, N):
        v1 = planet[j-1]
        v2 = planet[j]
        graph[v1[3]].append((abs(v1[i] - v2[i]), v2[3]))
        graph[v2[3]].append((abs(v1[i] - v2[i]), v1[3]))

root = [i for i in range(N+1)]      # 각 정점의 root
heap = [(0, 1, 1)]                  # 가중치의 합, 정점 v1, v2
heapq.heapify(heap)
count = 0
answer = 0
while True:
    if count == N:                  # V-1개의 간선 생성시 종료
        break

    nowWeight, v1, v2 = heapq.heappop(heap)
    if count != 0:
        # cycle 생성 방지
        p1 = find_parent(root, v1)
        p2 = find_parent(root, v2)

        if p1 == p2:
            continue
        else:
            count += 1
            answer += nowWeight
            if p1 < p2:
                root[p2] = p1
            else:
                root[p1] = p2
    else:
        count += 1

    # 현재 정점과 연결된 정점을 heap에 저장
    length = len(graph[v2])
    for i in range(length):
        weight = graph[v2][len(graph[v2])-1][0]
        connV = graph[v2][len(graph[v2])-1][1]
        heapq.heappush(heap, (weight, v2, connV))
        graph[v2].pop()

print(answer)
