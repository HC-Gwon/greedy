import sys


def find_parent(arr, x):
    while arr[x] != x:
        x = arr[x]

    return x


N, M = map(int, sys.stdin.readline().split())
MAP = [[0 for j in range(M)] for i in range(N)]

for i in range(N):
    MAP[i] = list(map(int, sys.stdin.readline().split()))
    for j in range(M):
        if MAP[i][j] == 1:
            MAP[i][j] = -1

# BFS를 활용하여 각 섬에 대해서 번호를 매긴다.
dirX = [0, 0, -1, 1]            # 상하좌우
dirY = [-1, 1, 0, 0]
nbr = 1
for i in range(N):
    for j in range(M):
        if MAP[i][j] == -1:
            arr = [(j, i)]      # 가로, 세로
            while True:
                if len(arr) == 0:
                    break

                x, y = arr.pop()
                MAP[y][x] = nbr
                for k in range(4):
                    X = x + dirX[k]
                    Y = y + dirY[k]
                    if 0 <= X < M and 0 <= Y < N:
                        if MAP[Y][X] == -1:
                            arr.append((X, Y))

            nbr += 1

# BFS를 활용하여 각 섬간의 거리를 측정한다.
dist = []
for i in range(N):
    for j in range(M):
        if MAP[i][j] != 0:
            island = MAP[i][j]          # 섬의 번호를 저장
            for k in range(4):
                count = 0
                check = 0
                X, Y = j, i
                while True:             # 상하좌우 한방향으로 계속 이동하며
                    X = X + dirX[k]     # 연결되는 섬을 찾는다
                    Y = Y + dirY[k]
                    if 0 <= X < M and 0 <= Y < N:
                        if MAP[Y][X] == 0:
                            count += 1
                            check = 1
                        elif MAP[Y][X] != island:       # 다른 섬과 만났을 때
                            if count > 1:
                                dist.append((count, island, MAP[Y][X]))
                            break
                        elif MAP[Y][X] == island and check == 1:    # 지나다가 본인 섬을 만나는 경우
                            break
                    else:
                        break

dist = list(set(dist))                  # 중복 제거를 위해 list->set->list

# MST 알고리즘을 활용하여 다리길이의 최솟값 구한다.
dist.sort(key=lambda x: x[0], reverse=True)            # Kruskal algorithm 적용을 위한 정렬
root = [i for i in range(nbr)]          # 각 정점의 root
count = 0
answer = 0
while True:
    if count == nbr-2:                  # (섬의 개수-1)개의 간선 생성시 종료
        break

    if len(dist) == 0:                  # 연결 불가능한 경우
        answer = -1
        break

    length = len(dist)
    weight, x1, x2 = dist[length-1]     # 가중치, 연결된 정점 1과 2
    # cycle 생성 방지
    p1 = find_parent(root, x1)
    p2 = find_parent(root, x2)
    if p1 != p2:
        count += 1
        answer += weight
        if p1 < p2:
            root[p2] = p1
        else:
            root[p1] = p2

    dist.pop()

print(answer)
